/***************************************************************************
 *
 * krt - Kens Raytracer - Coursework Edition. (C) Copyright 1997-2019.
 *
 * Do what you like with this code as long as you retain this comment.
 *
* On linux.bath.ac.uk:
 *
 * Compile the code using g++ -o lab4executable main_lab4.cpp framebuffer.cpp polymesh.cpp sphere.cpp spotLight.cpp phong.cpp -lm
 *
 * Execute the code using ./lab4executable
 *
 * This will produce an image file called test.ppm. You can convert this a png file for viewing using
 *
 * pbmropng test.ppm > test.png
 */

#include "framebuffer.h"
#include "ray.h"
#include "hit.h"
#include "polymesh.h"
#include "sphere.h"
#include "light.h"
#include "directionalLight.h"
#include "spotLight.h"
#include "material.h"
#include "phong.h"
#include "kdTree/src/tree.h"

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <random>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

struct Photon{
  public:
    int type; // 0 is direct, 1 is shadow, 2 is specular, 3 is diffuse, 4 is transmission
    Colour intensity;
    Vector direction;
    Vertex position;
};

struct CORE{
  typedef Photon* Item;  // The type we store in the tree.
  typedef Vertex  Point; // The type we read coordinates from.
  typedef float  Coord; // The type of individual coordinates.

  static const int DIMENSIONS =  3; // We're in a three-dimensional space.
  static const int MAX_DEPTH  = 1000; // The tree will reach at most ten levels.
  static const int STORAGE    =  1; // Leaves can hold eight items before splitting.

  // Get the distance of a point along the given axis.
  static Coord coordinate(const Point& point, int axis){
    switch(axis){
      case(0):
        return point.x;
      case(1):
        return point.y;
      case(2):
        return point.z;
      default:
        return 0.0f;
    }
  }

  // Get the location of an item
  static const Point& point(const Item& item)
  {
    return item->position;
  }
};

Vertex minPoint(-100, -100, -5);
Vertex maxPoint(100, 100, 100);
KD::Tree<CORE> kdtree(minPoint, maxPoint);
KD::Tree<CORE> kdCaustictree(minPoint, maxPoint);
std::default_random_engine generator;
std::uniform_real_distribution<float> distribution(0.0f,1.0f);

void objectTest(Ray ray, Object *objects, Hit &bestHit){
  Object *obj = objects;

  bestHit.flag = false;

  while(obj != 0){
    Hit objHit;
    objHit.flag=false;

    obj->intersection(ray, objHit);

    if(objHit.flag){
      if(objHit.t > 0.0f){
        if(bestHit.flag == false){
          bestHit = objHit;
        }
        else if(objHit.t < bestHit.t){
	         bestHit = objHit;
	        }
        }
      }

      obj = obj->next;
    }

    return;
  }

Vector generateRandVect(Vector initial){
  float sinTheta, cosTheta, psi;
  float a, b, c;
  Vector direction;

  do{
    sinTheta = sqrtf(distribution(generator));
    cosTheta = sqrtf(1-sinTheta*sinTheta);

    psi = distribution(generator)*2*M_PI;

    a = sinTheta*cos(psi);
    b = sinTheta*sin(psi);
    c = cosTheta;

    direction = Vector(a, b, c);
    direction.normalise();
  } while(direction.dot(initial) < 0.0f);
  return direction;
}

void tracePhoton(Ray ray, int recursions, Light *light, Object *objects, Colour photonIntensity, bool caustic){
  Hit *hit = new Hit;
  Vector direction;
  objectTest(ray, objects, *hit);

  if(hit->flag){
    float Pd = hit->what->material->Pd();
    float Ps = hit->what->material->Ps();

    float random = distribution(generator);

    if(random < Pd){ // Photon is reflected diffusely
      bool rightDirection = false;
      Vector reflectedVect;
      hit->normal.reflection(ray.direction, reflectedVect);

      direction = generateRandVect(reflectedVect);

      Vertex newPosition(hit->position.x + 1e-4 * direction.x,
                         hit->position.y + 1e-4 * direction.y,
                         hit->position.z + 1e-4 * direction.z);
      objectTest(Ray(newPosition, direction), objects, *hit);

      if(hit->flag){
        Photon *photon = (Photon *) malloc(sizeof(Photon));
        photon->type = 3;
        photon->direction = direction;
        photon->position = hit->position;
        Colour scaling = hit->what->material->getDiffuse();
        photonIntensity.scale(scaling);
        photonIntensity.scale(1.0f/Pd);
        photon->intensity = photonIntensity;
        if(caustic){
          kdCaustictree.insert(photon);
        }
        else{
          kdtree.insert(photon);
        }
      }
    }
    else if(random < Pd + Ps){ //Photon is reflected specularly
      Vector reflectedVect;
      hit->normal.reflection(direction, reflectedVect);
      Vertex newPosition(hit->position.x + 1e-4 * reflectedVect.x,
                         hit->position.y + 1e-4 * reflectedVect.y,
                         hit->position.z + 1e-4 * reflectedVect.z);

      Ray newRay(newPosition, reflectedVect);

      objectTest(newRay, objects, *hit);

      if(hit->flag){
        // Photon *photon = (Photon *) malloc(sizeof(Photon));
        // photon->type = 2;
        // photon->direction = reflectedVect;
        // photon->position = hit->position;
        Colour scaling = hit->what->material->getSpecular();
        photonIntensity.scale(scaling);
        photonIntensity.scale(1.0f/Ps);
        // photon->intensity = photonIntensity;
        // kdtree.insert(photon);

        if(recursions > 0){
          tracePhoton(newRay, recursions-1, light, objects, photonIntensity, caustic);
        }
      }
    }
    else if(random < 0.9f){ // Photon is refracted
      Vector refractedVect = ray.direction.refraction(hit->normal, 1.52f);
      refractedVect.normalise();
      Vertex newPosition(hit->position.x + 1e-4 * refractedVect.x,
                         hit->position.y + 1e-4 * refractedVect.y,
                         hit->position.z + 1e-4 * refractedVect.z);

      Ray newRay(newPosition, refractedVect);

      objectTest(newRay, objects, *hit);

      if(hit->flag){
        Photon *photon = (Photon *) malloc(sizeof(Photon));
        photon->type = 4;
        photon->direction = refractedVect;
        photon->position = hit->position;
        photon->intensity = photonIntensity;
        if(caustic){
          kdCaustictree.insert(photon);
        }
        else{
          kdtree.insert(photon);
        }

        if(recursions > 0){
          tracePhoton(newRay, recursions-1, light, objects, photonIntensity, caustic);
        }
      }
    }
    else{ // Photon is absorbed

    }
  }
}

void castCausticPhoton(Light *light, Object *objects, Colour photonIntensity, int recursions){
  Vector direction;
  Vector lightDirection;
  light->returnDirection(lightDirection);

  direction = generateRandVect(lightDirection);

  Hit *hit = new Hit;
  Hit bestHit;
  objectTest(Ray(light->getPosition(), direction), objects, *hit);

  if(hit->flag){ // Create direct illumination photon
    if(hit->what->material->refraction || hit->what->material->reflection){
      bestHit = *hit;
      float Ps = bestHit.what->material->Ps();
      float Pd = bestHit.what->material->Pd();

      float random = distribution(generator);

      if(Pd < random && random < Pd + Ps){ //Photon is reflected specularly
        Vector reflectedVect;
        bestHit.normal.reflection(direction, reflectedVect);
        Vertex newPosition(bestHit.position.x + 1e-4 * reflectedVect.x,
                           bestHit.position.y + 1e-4 * reflectedVect.y,
                           bestHit.position.z + 1e-4 * reflectedVect.z);

        Ray newRay(newPosition, reflectedVect);

        objectTest(newRay, objects, *hit);

        if(hit->flag){
          // Photon *photonSpec = (Photon *) malloc(sizeof(Photon));
          // photonSpec->type = 2;
          // photonSpec->direction = reflectedVect;
          // photonSpec->position = hit->position;
          Colour scaling = bestHit.what->material->getSpecular();
          photonIntensity.scale(scaling);
          photonIntensity.scale(1.0f/Ps);
          // photonSpec->intensity = photonIntensity;
          // kdtree.insert(photonSpec);

          tracePhoton(newRay, recursions, light, objects, photonIntensity, true);
        }
      }
      else if(random < 1.0f){ // Photon is refracted
        Vector refractedVect = direction.refraction(bestHit.normal, 1.52f);
        refractedVect.normalise();
        Vertex refractedVert(bestHit.position.x + 1e-4 * refractedVect.x,
                             bestHit.position.y + 1e-4 * refractedVect.y,
                             bestHit.position.z + 1e-4 * refractedVect.z);

        Ray newRay(refractedVert, refractedVect);


        objectTest(newRay, objects, *hit);

        if(hit->flag){
          Photon *photonRefract = (Photon *) malloc(sizeof(Photon));
          photonRefract->type = 4;
          photonRefract->direction = refractedVect;
          photonRefract->position = hit->position;
          photonRefract->intensity = photonIntensity;
          kdtree.insert(photonRefract);

          tracePhoton(newRay, recursions, light, objects, photonIntensity, true);
        }
      }
      else{ // Photon is absorbed

      }
    }
    else{
      castCausticPhoton(light, objects, photonIntensity, recursions);
    }
  }
  else{
    castCausticPhoton(light, objects, photonIntensity, recursions);
  }
}

void castPhoton(Light *light, Object *objects, Colour photonIntensity, int recursions){
  Vector direction;
  Vector lightDirection;
  light->returnDirection(lightDirection);

  direction = generateRandVect(lightDirection);

  Hit *hit = new Hit;
  Hit bestHit;
  objectTest(Ray(light->getPosition(), direction), objects, *hit);

  if(hit->flag){ // Create direct illumination photon
    bestHit = *hit;
    float Ps = bestHit.what->material->Ps();
    float Pd = bestHit.what->material->Pd();

    Photon *photon = (Photon *) malloc(sizeof(Photon));
    photon->type = 0;
    photon->direction = direction;
    photon->position = hit->position;
    photon->intensity = photonIntensity;
    kdtree.insert(photon);

    while(hit->flag){
      Vertex newPosition(hit->position.x + 1e-4 * direction.x,
                         hit->position.y + 1e-4 * direction.y,
                         hit->position.z + 1e-4 * direction.z);
      objectTest(Ray(newPosition, direction), objects, *hit);

      if(hit->flag){ // Create shadow photons on all objects in shadow from above hit
        if(hit->t > 0.0f){
          Photon *photonShadow = (Photon *) malloc(sizeof(Photon));
          photonShadow->type = 1;
          photonShadow->direction = direction;
          photonShadow->position = hit->position;
          photonShadow->intensity = Colour(0, 0, 0);
          kdtree.insert(photonShadow);
        }
      }
    }

    float random = distribution(generator);

    if(random < Pd){ // Photon is reflected diffusely
      Vector reflectedVect;
      bestHit.normal.reflection(direction, reflectedVect);

      direction = generateRandVect(reflectedVect);

      Vertex newPosition(bestHit.position.x + 1e-4 * direction.x,
                         bestHit.position.y + 1e-4 * direction.y,
                         bestHit.position.z + 1e-4 * direction.z);
      objectTest(Ray(newPosition, direction), objects, *hit);

      if(hit->flag){
        Photon *photonDiff = (Photon *) malloc(sizeof(Photon));
        photonDiff->type = 3;
        photonDiff->direction = direction;
        photonDiff->position = hit->position;
        Colour scaling = bestHit.what->material->getDiffuse();
        photonIntensity.scale(scaling);
        photonIntensity.scale(1.0f/Pd);
        photonDiff->intensity = photonIntensity;
        kdtree.insert(photonDiff);

      }
    }
    else if(random < Pd + Ps){ //Photon is reflected specularly
      Vector reflectedVect;
      bestHit.normal.reflection(direction, reflectedVect);
      Vertex newPosition(bestHit.position.x + 1e-4 * reflectedVect.x,
                         bestHit.position.y + 1e-4 * reflectedVect.y,
                         bestHit.position.z + 1e-4 * reflectedVect.z);

      Ray newRay(newPosition, reflectedVect);

      objectTest(newRay, objects, *hit);

      if(hit->flag){
        Colour scaling = bestHit.what->material->getSpecular();
        photonIntensity.scale(scaling);
        photonIntensity.scale(1.0f/Ps);

        tracePhoton(newRay, recursions, light, objects, photonIntensity, false);
      }
    }
    else if(random < 0.9f){ // Photon is refracted
      Vector refractedVect = direction.refraction(bestHit.normal, 1.52f);
      refractedVect.normalise();
      Vertex refractedVert(bestHit.position.x + 1e-4 * refractedVect.x,
                           bestHit.position.y + 1e-4 * refractedVect.y,
                           bestHit.position.z + 1e-4 * refractedVect.z);

      Ray newRay(refractedVert, refractedVect);


      objectTest(newRay, objects, *hit);

      if(hit->flag){
        // Photon *photonRefract = (Photon *) malloc(sizeof(Photon));
        // photonRefract->type = 4;
        // photonRefract->direction = refractedVect;
        // photonRefract->position = hit->position;
        // photonRefract->intensity = photonIntensity;
        // kdtree.insert(photonRefract);

        tracePhoton(newRay, recursions, light, objects, photonIntensity, false);
      }
    }
    else{ // Photon is absorbed

    }
  }
  else{
    castPhoton(light, objects, photonIntensity, recursions);
  }
}

void raytrace(Ray ray, Object *objects, Light *lights, Colour &colour, int recursions){
  // first step, find the closest primitive
  Hit shadowHit;
  Hit bestHit;
  objectTest(ray, objects, bestHit);

  if(bestHit.flag){
    bool shadowed = true;
    bool lit = true;
    vector<Photon*> nearest = kdtree.within(bestHit.position, 0.05f);
    vector<Photon*> nearest2 = kdCaustictree.within(bestHit.position, 0.05f);

    for(int i = 0; i < nearest.size(); i++){
      if(nearest[i]->type == 0){
        shadowed = false;
      }
      else if(nearest[i]->type == 1){
        lit = false;
      }
      if(shadowed == false && lit == false){
        break;
      }
      colour = Colour(1, 0, 0);
    }
    if(nearest2.size() > 0){
      colour = Colour(0, 1, 0);
    }

    bestHit.what->material->computeBaseColour(colour);
    colour.d = bestHit.t;

    Light *light = lights;

    while (light != (Light *)0){
      Vector viewer;
      Vector ldir;

      viewer.x = -bestHit.position.x;
      viewer.y = -bestHit.position.y;
      viewer.z = -bestHit.position.z;
      viewer.normalise();

      light->returnDirection(ldir);

      if(lit == shadowed){
	       Ray shadowRay;
         Vertex lightPos = light->getPosition();
         shadowRay.direction.x = lightPos.x - bestHit.position.x;
         shadowRay.direction.y = lightPos.y - bestHit.position.y;
         shadowRay.direction.z = lightPos.z - bestHit.position.z;
         shadowRay.position.x = bestHit.position.x + (1e-4 * shadowRay.direction.x);
         shadowRay.position.y = bestHit.position.y + (1e-4 * shadowRay.direction.y);
         shadowRay.position.z = bestHit.position.z + (1e-4 * shadowRay.direction.z);

         objectTest(shadowRay, objects, shadowHit);

         if(shadowHit.flag == true){
           if(shadowHit.t > 0){
            lit = false; //there's a shadow so no lighting, if realistically close
            }
            else{
              lit = true;
            }
         }
         else{
           lit = true;
         }
       }

       if(lit){
         Colour intensity;
         Colour scaling;

	       light->getIntensity(scaling);
	       bestHit.what->material->computeLightColour(viewer, bestHit.normal, ldir, intensity);

         intensity.scale(scaling);
	       colour.add(intensity);
       }

       if(recursions > 0 && bestHit.what->material->reflection){
         Vector reflectedVect;
         bestHit.normal.reflection(ray.direction, reflectedVect);
         float Kr = ray.direction.fresnel(bestHit.normal, 1.52f);
         reflectedVect.normalise();
         Vertex reflectedVert(bestHit.position.x + 1e-4 * reflectedVect.x,
                              bestHit.position.y + 1e-4 * reflectedVect.y,
                              bestHit.position.z + 1e-4 * reflectedVect.z);
         Ray reflectedRay(reflectedVert, reflectedVect);

         Colour intensity;
         Colour scaling(Kr, Kr, Kr, Kr);

         raytrace(reflectedRay, objects, lights, intensity, recursions-1);

         intensity.scale(scaling);
         colour.add(intensity);
       }

       if(recursions > 0 && bestHit.what->material->refraction){
         Vector refractedVect = ray.direction.refraction(bestHit.normal, 1.52f);
         refractedVect.normalise();
         float Kt = 1 - ray.direction.fresnel(bestHit.normal, 1.52f);

         Vertex refractedVert(bestHit.position.x + 1e-4 * refractedVect.x,
                              bestHit.position.y + 1e-4 * refractedVect.y,
                              bestHit.position.z + 1e-4 * refractedVect.z);

         Ray refractedRay(refractedVert, refractedVect);

         Colour intensity;
         Colour scaling(Kt,Kt,Kt,Kt);

         raytrace(refractedRay, objects, lights, intensity, recursions-1);

         intensity.scale(scaling);
         colour.add(intensity);
       }

       light = light->next;
     }

  }
  else{
    colour.d = 100.0f;
    colour.r = 0.0f;
    colour.g = 0.0f;
    colour.b = 0.0f;
    colour.a = 0.0f;
  }
}

int main(int argc, char *argv[]){
  bool blurring = false;
  int recursions = 5;
  int photons = 10000;

  int width = 512;
  int height = 512;
  // Create a framebuffer
  FrameBuffer *fb = new FrameBuffer(width, height);
  FrameBuffer *fb2 = new FrameBuffer(width, height);

  Transform *transform = new Transform(1.0f, 0.0f, 0.0f, 0.0f,
                                       0.0f, 0.0f, 1.0f, -2.7f,
                                       0.0f, 1.0f, 0.0f, 5.0f,
                                       0.0f, 0.0f, 0.0f, 1.0f);

  Transform *transform2 = new Transform(1.0f, 0.0f, 0.0f, 0.0f,
                                        0.0f, 1.0f, 0.0f, -10.0f,
                                        0.0f, 0.0f, 1.0f, 11.0f,
                                        0.0f, 0.0f, 0.0f, 1.0f);

    //  Read in the teapot model.
  PolyMesh *pm = new PolyMesh((char *)"teapot.ply", transform2);
  PolyMesh *pm2 = new PolyMesh((char *)"whiteWalls.ply", transform2);
  PolyMesh *pm3 = new PolyMesh((char *)"leftWall.ply", transform2);
  PolyMesh *pm4 = new PolyMesh((char *)"rightWall.ply", transform2);
  PolyMesh *mug = new PolyMesh((char *)"mug.ply", transform2);
  // The following transform allows 4D homogeneous coordinates to be transformed. It moves the supplied teapot model to somewhere visible.

  Vertex v;
  v.x = 1.0f;  v.y = 0.0f;  v.z = 2.0f;
  Sphere *sphere = new Sphere(v, 0.4f);

  Vertex v2;
  v2.x = -1.0f;  v2.y = -1.5f;  v2.z = 3.0f;
  Sphere *sphere2 = new Sphere(v2, 0.4f);

  Vertex v3;
  v3.x = 0.0f;  v3.y = 3.0f;  v3.z = 10.0f;
  Sphere *sphere3 = new Sphere(v3, 1.0f);

  Vertex v4;
  v4.x = -5.0f;  v4.y = -1.0f;  v4.z = 10.0f;
  Sphere *sphere4 = new Sphere(v4, 1.0f);

  Ray ray;

  ray.position.x = 0.0001f;
  ray.position.y = 0.0f;
  ray.position.z = 0.0f;

  // DirectionalLight *pl = new DirectionalLight(Vector(0.25f, -1.0f, 1.0f),
  // Colour(1.0f, 1.0f, 1.0f, 0.0f));

  SpotLight *pl = new SpotLight(Vector(0.0f, -1.0f, 0.0f),
  Colour(1.0f, 1.0f, 1.0f, 0.0f), Vertex(0.0f, 10.0f, 10.0f));

  Phong bp1;
  bp1.ambient.r = 0.2f;  bp1.ambient.g = 0.0f;  bp1.ambient.b = 0.0f;
  bp1.diffuse.r = 0.4f;  bp1.diffuse.g = 0.0f;  bp1.diffuse.b = 0.0f;
  bp1.specular.r = 0.2f;  bp1.specular.g = 0.2f;  bp1.specular.b = 0.2f;
  bp1.power = 40.0f;  bp1.n = 1.0f;
  bp1.refraction = true;  bp1.reflection = true;
  bp1.normalise();

  Phong bp2;
  bp2.ambient.r = 0.0f;  bp2.ambient.g = 0.0f;  bp2.ambient.b = 0.2f;
  bp2.diffuse.r = 0.0f;  bp2.diffuse.g = 0.0f;  bp2.diffuse.b = 0.4f;
  bp2.specular.r = 0.3f;  bp2.specular.g = 0.3f;  bp2.specular.b = 0.3f;
  bp2.power = 40.0f;  bp2.n = 1.52f;
  bp2.refraction = true; bp2.reflection = true;
  bp2.normalise();

  Phong bp3;
  bp3.ambient.r = 0.4f;  bp3.ambient.g = 0.4f;  bp3.ambient.b = 0.4f;
  bp3.diffuse.r = 0.4f;  bp3.diffuse.g = 0.4f;  bp3.diffuse.b = 0.4f;
  bp3.specular.r = 0.4f;  bp3.specular.g = 0.4f;  bp3.specular.b = 0.4f;
  bp3.power = 40.0f;  bp3.n = 1.0f;
  bp3.refraction = false;  bp3.reflection = false;
  bp3.normalise();

  Phong bp4;
  bp4.ambient.r = 0.2f;  bp4.ambient.g = 0.2f;  bp4.ambient.b = 0.2f;
  bp4.diffuse.r = 0.2f;  bp4.diffuse.g = 0.2f;  bp4.diffuse.b = 0.2f;
  bp4.specular.r = 0.5f;  bp4.specular.g = 0.5f;  bp4.specular.b = 0.5f;
  bp4.power = 40.0f;  bp4.n = 1.3f;
  bp4.refraction = true;  bp4.reflection = true;
  bp4.normalise();

  Phong bpRed;
  bpRed.ambient.r = 0.4f;  bpRed.ambient.g = 0.0f;  bpRed.ambient.b = 0.0f;
  bpRed.diffuse.r = 0.4f;  bpRed.diffuse.g = 0.0f;  bpRed.diffuse.b = 0.0f;
  bpRed.specular.r = 0.4f;  bpRed.specular.g = 0.4f;  bpRed.specular.b = 0.4f;
  bpRed.power = 40.0f;  bpRed.n = 1.0f;
  bpRed.refraction = false;  bpRed.reflection = true;
  bpRed.normalise();

  Phong bpGreen;
  bpGreen.ambient.r = 0.0f;  bpGreen.ambient.g = 0.4f;  bpGreen.ambient.b = 0.0f;
  bpGreen.diffuse.r = 0.0f;  bpGreen.diffuse.g = 0.4f;  bpGreen.diffuse.b = 0.0f;
  bpGreen.specular.r = 0.4f;  bpGreen.specular.g = 0.4f;  bpGreen.specular.b = 0.4f;
  bpGreen.power = 40.0f;  bpGreen.n = 1.0f;
  bpGreen.refraction = false;  bpGreen.reflection = true;
  bpGreen.normalise();

  sphere->material = &bp4;
  sphere2->material = &bp4;
  sphere3->material = &bp2;
  sphere4->material = &bp1;
  pm->material = &bp1;
  pm2->material = &bp3;
  pm3->material = &bpRed;
  pm4->material = &bpGreen;

  pm->next = pm2;
  pm2->next = pm3;
  pm3->next = pm4;
  pm4->next = sphere;
  sphere->next = sphere2;
  sphere2->next = sphere3;
  sphere3->next = sphere4;

  int count = 0;
  Colour photonIntensity(1.0f/photons, 1.0f/photons, 1.0f/photons);

  for(int i = 0; i < photons; i++){
    count++;
    if(count % (photons/10) == 0){
      printf("Photon %d\n", count);
    }
    castPhoton(pl, pm2, photonIntensity, recursions);
    castCausticPhoton(pl, pm2, photonIntensity, recursions);
  }

  count = 0;
  for (int y = 0; y < height; y += 1){
    count += 1;
    if(count % 10 == 0){
      printf("Raycast %d\n", count);
    }
    for (int x = 0; x < width; x += 1){
      float fx = (float)x/(float)width;
      float fy = (float)y/(float)height;

      Vector direction;

      ray.direction.x = (fx-0.5f);
      ray.direction.y = (0.5f-fy);
      ray.direction.z = 0.5f;
      ray.direction.normalise();

      Colour colour;

      raytrace(ray, pm2, pl, colour, recursions);

      fb->plotPixel(x, y, colour.r, colour.g, colour.b);
      fb->plotDepth(x,y, colour.d);
    }
  }


  // Output the framebuffer.
  if(blurring){
    fb2->blur(fb);
    printf("Blurred\n");
    fb2->writeRGBFile((char *)"test.ppm");
  }
  else{
    fb->writeRGBFile((char *)"test.ppm");
  }
  // fb->writeDepthFile((char *)"depth.ppm");
  return 0;

}
